// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = [ "native","debian-openssl-1.1.x","debian-openssl-3.0.x","linux-musl","linux-musl-openssl-3.0.x" ]
}

datasource db {
  provider = "postgresql"
  url      = env("USE_DATABASE_1")
}

model Paciente {
  id              Int      @id @default(autoincrement())
  nome            String
  cpf             String?
  data_nascimento String?
  endereco        String?
  numero          Int?
  bairro          String?
  complemento     String?
  cep             Int?
  telefone        String
  email           String?
  created_at      DateTime
  updated_at      DateTime
  deleted_at      DateTime
  is_active       Boolean

  agendamento Agendamento[]
  constulta   Consulta[]
  anamnese    Anamnese[]
}

model Anamnese {
  id                             Int      @id @default(autoincrement())
  infeccao_urinaria              Boolean?
  dst                            String?
  pedra_nos_rins                 String?
  problema_nos_testiculos        String?
  historico_de_cancer_na_familia String?
  doenca_cronica                 String?
  utiliza_remedios               String?
  fumante                        String?
  bebidas_alcoolicas             String?
  droga                          String?

  created_at DateTime
  updated_at DateTime
  deleted_at DateTime
  is_active  Boolean

  paciente_   Paciente @relation(fields: [paciente_id], references: [id])
  paciente_id Int
}

model Agendamento {
  id                       Int      @id @default(autoincrement())
  observacao               String
  status                   String
  data_de_agendado         DateTime
  created_at               DateTime
  updated_at               DateTime
  deleted_at               DateTime
  extendedAgendamentosData Json?

  medico    Usuario @relation(fields: [medico_id], references: [id])
  medico_id Int

  paciente    Paciente @relation(fields: [paciente_id], references: [id])
  paciente_id Int
}

model Consulta {
  id          Int      @id @default(autoincrement())
  diagnostico String
  prescricao  String
  convenio    String
  status      String
  created_at  DateTime
  updated_at  DateTime
  deleted_at  DateTime

  medico      Usuario  @relation(fields: [medico_id], references: [id])
  medico_id   Int
  paciente    Paciente @relation(fields: [paciente_id], references: [id])
  paciente_id Int
}

model Usuario {
  id         Int      @id @default(autoincrement())
  nome       String   @unique
  senha      String
  email      String
  ocupacao   String
  created_at DateTime
  updated_at DateTime
  deleted_at DateTime
  is_active  Boolean

  agendamento          Agendamento[]
  consulta             Consulta[]
  controle_paciente    Controle_paciente[]
  controle_anamnese    Controle_anamnese[]
  controle_agendamento Controle_agendamento[]
  controle_consulta    Controle_consulta[]
  controle_usuario     Controle_usuario[]
}

model Controle_paciente {
  id              Int     @id @default(autoincrement())
  read_paciente   Boolean
  create_paciente Boolean
  update_paciente Boolean
  delete_paciente Boolean

  usuario    Usuario @relation(fields: [id], references: [id])
  usuario_id Int?
}

model Controle_anamnese {
  id Int @id @default(autoincrement())

  create_anamnese Boolean
  update_anamnese Boolean
  read_anamnese   Boolean
  delete_anamnese Boolean

  usuario    Usuario @relation(fields: [id], references: [id])
  usuario_id Int?
}

model Controle_agendamento {
  id Int @id @default(autoincrement())

  create_agendamento Boolean
  update_agendamento Boolean
  read_agendamento   Boolean
  delete_agendamento Boolean

  usuario    Usuario @relation(fields: [id], references: [id])
  usuario_id Int?
}

model Controle_consulta {
  id              Int     @id @default(autoincrement())
  create_consulta Boolean
  update_consulta Boolean
  read_consulta   Boolean
  delete_consulta Boolean

  usuario    Usuario @relation(fields: [id], references: [id])
  usuario_id Int?
}

model Controle_usuario {
  id             Int     @id @default(autoincrement())
  create_usuario Boolean
  update_usuario Boolean
  read_usuario   Boolean
  delete_usuario Boolean

  usuario    Usuario @relation(fields: [id], references: [id])
  usuario_id Int?
}
